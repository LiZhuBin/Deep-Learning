{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","version":"0.3.2","provenance":[],"collapsed_sections":[]}},"cells":[{"metadata":{"id":"_Qb2acez4E_8","colab_type":"code","colab":{}},"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Op0giJ7c4IIN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"123ca384-d216-474f-9016-5e7de60a4e2d","executionInfo":{"status":"ok","timestamp":1534174084796,"user_tz":-480,"elapsed":1699,"user":{"displayName":"李主彬","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"116243471005489337644"}}},"cell_type":"code","source":["#!matrix matmul\n","matrix1 = tf.constant([[1,3]])\n","matrix2 = tf.constant([[1],\n","                              [2]])\n","#相乘\n","product = tf.matmul(matrix1,matrix2)\n","#运行\n","with tf.Session() as sess:\n","  print(sess.run(product))"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[[7]]\n"],"name":"stdout"}]},{"metadata":{"id":"Sg4YTnMU4vxv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"e750a1e1-13bb-4661-8c5d-257f0acf734c","executionInfo":{"status":"ok","timestamp":1534176382836,"user_tz":-480,"elapsed":1933,"user":{"displayName":"李主彬","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"116243471005489337644"}}},"cell_type":"code","source":["#feed 数据\n","input1 = tf.placeholder(tf.float32)\n","input2 = tf.placeholder(tf.float32)\n","output = tf.multiply(input1,input2)\n","with tf.Session() as sess:\n","  print(sess.run(output,feed_dict={input1:[1.],input2:[2.]}))"],"execution_count":15,"outputs":[{"output_type":"stream","text":["[2.]\n"],"name":"stdout"}]},{"metadata":{"id":"2kPq8-eh623S","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":369},"outputId":"900298d4-8add-4b26-bd1d-e7626dc791cd","executionInfo":{"status":"error","timestamp":1534178005725,"user_tz":-480,"elapsed":1924,"user":{"displayName":"李主彬","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"116243471005489337644"}}},"cell_type":"code","source":["#神经层\n","def add_layer(inputs,in_size,out_size,activation_function=None):\n","  Weight = tf.Variable(tf.random_normal([in_size,out_size]))\n","  biases = tf.Variable(tf.zeros(1,out_size)+0.1)\n","  Wx_plus_b = tf.matmul(inputs,Weight)+biases\n","  if activation_function is None:\n","    output = Wx_plus_b\n","  else:\n","    output = activation_function(Wx_plus_b)\n","    \n","  return output\n","\n","x_data = np.linspace(-1,1,300)[:,np.newaxis]\n","noise = np.random.normal(0,0.05,x_data.shape)\n","y_data = np.square(x_data)-0.5 +noise\n","\n","l1 = add_layer(x_data,1,10,activation_function=tf.nn.relu)\n","prediction= add_layer(l1,10,1,activation_function=None)\n","loss = tf.reduce_mean(tf.reduce.sum(tf.square(y_data-prediction),\n","                                   reduction_indices=[1]))\n","train_step = tf.train.GradientDescentOptimizer(0.1).minimize(lose)\n","\n","init = tf.initialize_all_variables()\n","with tf.Session() as sess:\n","  sess.run(init)"],"execution_count":25,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mTypeError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-25-647c109e3ea3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0my_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msquare\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m0.5\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0mnoise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0ml1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madd_layer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mactivation_function\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0mprediction\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0madd_layer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mactivation_function\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m loss = tf.reduce_mean(tf.reduce.sum(tf.square(y_data-prediction),\n","\u001b[0;32m<ipython-input-25-647c109e3ea3>\u001b[0m in \u001b[0;36madd_layer\u001b[0;34m(inputs, in_size, out_size, activation_function)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0madd_layer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0min_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mout_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mactivation_function\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0mWeight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVariable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom_normal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0min_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mout_size\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m   \u001b[0mbiases\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVariable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mout_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m   \u001b[0mWx_plus_b\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatmul\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mWeight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mbiases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mactivation_function\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'Tensor' and 'float'"]}]},{"metadata":{"id":"WJ8VF4C3FMqY","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}